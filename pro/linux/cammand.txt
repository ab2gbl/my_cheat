# https://gtfobins.github.io/gtfobins/journalctl/

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ System Information +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-h , man , info 				# command info

whoami 					# current user
id 					# Returns users identity
hostname
uname 					# Prints basic information about the operating system name and system hardware.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ workflow ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

pwd, ls, cd 				# navigation

tree .					# directory structure
touch, mkdir 				# creat file ,folder
cp, mv					# copy, cut/rename

vim, nano 				# edit file

--------------------------------------- Find Files and Directories ---------------------------------------------
find <location> <options>		
	-type f 			# 'f' stands for 'file'.
	-name *.conf 				
	-user root 	
	-size +20k 	
	-newermt 2020-03-03 	

sudo updatedb | locate *.conf		# faster search
------------------------------------------------------------------------------------------------------------------

--------------------------------------- File Descriptors and Redirections ---------------------------------------

    # Input	STDIN – 0
    # Output 	STDOUT – 1
    # error 	STDERR – 2

[command ] 2>/dev/null			# error to null
[command ] 2>/dev/null 1>results.txt	# error to null and result to file.txt
[command ] < stdout.txt			# file as input
[command ] >>results.txt		# without overwritten
[command1 ] | [command2 ]		# use command2 on the result of command1 
------------------------------------------------------------------------------------------------------------------

------------------------------------------- Filter Contents ------------------------------------------------------
cat, more , less 			# display content of file
head, Tail				# display first, last lines of file
cat [file] | sort			# sort the file lines
cat [file] | grep "str"			# find lines with str
cat [file] | grep -v "false\|nolog"	# all lines that have "false" or "nolog"	

cat [file] | cut -d":" -f1		# cut where -d is the delimiter ( : here ) and -f for position ( 1 here )
	# example: root:x:0:0:root:/root:/bin/bash 	--> 	root
	
cat [file] | tr ":" " "			# replace ":" by " "
	# example: root:x:0:0:root:/root:/bin/bash 	--> 	root x 0 0 root /root /bin/bash
------------------------------------------------------------------------------------------------------------------

------------------------------------------------ Permissions -----------------------------------------------------
chmod					# Change permissions
chown <user>:<group> <file>		# change owner
------------------------------------------------------------------------------------------------------------------

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ System Management +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-------------------------------------- Service and Process Management---------------------------------------------

systemctl start ssh			# start process in the background ( ssh here )
systemctl status ssh			# status of process
systemctl enable ssh			# auto run with startup
ps -aux | grep ssh			# check process
systemctl list-units --type=service	# list all services

kill -l					# kill options
kill 9 <PID> 				# kill process with option 9

[Ctrl + Z]				# background a process
jobs					# display all background processes
bg 					# to put the process from the background
fg 1					# to put process 1 from the background

------------------------------------------------------------------------------------------------------------------

-------------------------------------- Task Scheduling ---------------------------------------------

*********************************************** Systemd ***********************************************
    # 1- Create a timer (schedules when your mytimer.service should run)
    # 2- Create a service (executes the commands or script)
    # 3- Activate the timer

# 1- Create a Timer
	
sudo mkdir /etc/systemd/system/mytimer.timer.d
sudo vim /etc/systemd/system/mytimer.timer
    =====================================
	[Unit]
	Description=My Timer

	[Timer]
	OnBootSec=3min			# run our script only once after the system boot
	OnUnitActiveSec=1hour		# script to run regularly

	[Install]
	WantedBy=timers.target
    =====================================	

# 2- Create a Service

sudo vim /etc/systemd/system/mytimer.service
    =====================================
	[Unit]
	Description=My Service

	[Service]
	ExecStart=/full/path/to/my/script.sh

	[Install]
	WantedBy=multi-user.target
    =====================================
  
# 2-b Reload Systemd
sudo systemctl daemon-reload

# 3- Start the Timer & Service
sudo systemctl start mytimer.timer
sudo systemctl enable mytimer.timer
*******************************************************************************************************
************************************************ Cron *************************************************
# store the tasks in a file called crontab
    ==========================================================================================================
	# Minutes (0-59 , Hours (0-23) , Days of month (1-31) , Months (1-12) , Days of the week (0-7) , path 
	# System Update
	0 */6 * * * /path/to/update_software.sh			# every sixth hour	

	# Execute scripts
	0 0 1 * * /path/to/scripts/run_scripts.sh		# every first day of the month

	# Cleanup DB
	0 0 * * 0 /path/to/scripts/clean_database.sh		# every Sunday at midnight

	# Backups
	0 0 * * 7 /path/to/scripts/backup.sh			# every Sunday at midnight
    ============================================================================================================
*******************************************************************************************************

------------------------------------------------------------------------------------------------------------------


-------------------------------------- Network Services ---------------------------------------------

**************************************** SSH ********************************************************
ssh username@10.129.17.122			# connect to ssg
etc/ssh/sshd_config 				# configuration file of openssg 
*****************************************************************************************************
**************************************** NFS ********************************************************
sudo apt install nfs-kernel-server -y		# Install NFS
/etc/exports					# configuration file

# Create NFS Share
	mkdir nfs_sharing
	echo '/home/[user]/nfs_sharing hostname(rw,sync,no_root_squash)' >> /etc/exports
	cat /etc/exports | grep -v "#"
	
# Mount NFS Share
	mkdir ~/target_nfs
	mount 10.129.12.17:/home/john/dev_scripts ~/target_nfs
	tree ~/target_nfs
*****************************************************************************************************
# Web Server ***************************************************
# VPN:	    sudo openvpn --config internal.ovpn

------------------------------------------------------------------------------------------------------------------

-------------------------------------- Working with Web Services ---------------------------------------------
# Apache modules
	# mod_ssl 				securing the communication between the browser and the web server by encrypting the data
	# mod_proxy 				module is like a traffic controller, directing requests to the correct destination
	# mod_headers and mod_rewrite 		give you fine control over the data traveling between browser and server, allowing you to modify HTTP headers and URLs on the fly
	
sudo systemctl start apache2 			# start the apach server on localhost
/etc/apache2/ports.conf 			# config file
------------------------------------------------------------------------------------------------------------------

------------------------------------------  Backup and Restore -------------------------------------------------
sudo apt install rsync -y			# install rsync ( backup tool )
rsync -av /path/to/mydirectory user@backup_server:/path/to/backup/directory		# Rsync - Backup a local Directory to our Backup-Server
rsync -av user@remote_host:/path/to/backup/directory /path/to/mydirectory		# Rsync - Restore our Backup
rsync -avz -e ssh /path/to/mydirectory user@backup_server:/path/to/backup/directory	# Secure Transfer of our Backup
...
------------------------------------------------------------------------------------------------------------------


