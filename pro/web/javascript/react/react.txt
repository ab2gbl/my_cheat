npm create vite@latest
npx create-react-app ./projectName                Create React app


-------------------------  /src/index.js -------------------------------------
// React <18

import React from "react";
import ReactDOM from "react-dom";
ReactDOM.render("Hello World", document.getElementById("root"));

// React >=18

import ReactDOM from "react-dom/client";
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render("hello world from react 18!");
-------------------------------------------------------------------------


for bootstrap u can just add the link and script in the public/index

-------------------- Components -------------------------------------

/project
├── /src
│   ├── /components                    # Reusable React components
│   │   └──/header                     # First Comp Folder (Header)
│   │   │  └──Header.jsx               # export default Header;
│   │   │  └──Header.css               
│   │   └──index.js                    # export { default as Header } from "./header/Header";
|   └──App.jsx                         # import { Header, Footer ... } from "./components";
│   └──index.js


++++++++++ Simple Cmponent (function) +++++++++++++++++
// shortcut , rfce or ffc
const App = (props) => {
  return (
    <div>
      <h1> {props.name} </h1>
      <div> {props.children} </div>
    </div>
  );
};
export default App;
+++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++ Simple Compenent (class) +++++++++++++++++++
import React from "react";

class App extends React.Component {
  method() {
    return "method";
  }
  render() {
    const name = "name";
    const method = this.method();

    return <div>
      {name + " " + method}
      props: {this.props.name}
    </div>;
  
  }
}
export default App;

+++++++++++++++++++++++++++++++++++++++++++++++++++++
------------------------------------------------------------------------------

----------------------------- States -------------------------------------
// u cant change and modify the props , but u can modify the states and pass it to children too

// so to create a state we will use constructor like this 
+++++++++++++++++++++++++++++++++++++
class App extends Component {
  constructor(){
    super()
    this.state = {
      name: "React"
    }
  }
  render() {
    return (
      <div>
        {this.state.name}
      </div>
    );
  }
}
export default App;
+++++++++++++++++++++++++++++++++++++

++++++++++++++ modify state example ++++++++++++++++++++++++++++++++++++++

class App extends React.Component {
  constructor() {
    super();
    this.state = {
      number: 0,
    };
    this.clickHandler = this.clickHandler.bind(this);              # add the methode that will modfify the state here like this 
  }
  clickHandler = () => {                                           # methode that will modfify the state
    this.setState({ number: this.state.number + 1 });
  };

  render() {
    return (
      <div>
        {this.state.number}
        <button onClick={this.clickHandler}> add one</button>
      </div>
    );
  }
}
export default App;

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--------------------------------------------------------------------------------------------

------------------------------- Routing --------------------------------------


<Link to="/">Home</Link>

// this is a simple routing we will not use alo

import { BrowserRouter as Router, Route, Routes, Link } from "react-router-dom";
import { Header, Container, Footer } from "./components";

function App() {
  return (
    <Router>
      <Header />
      <Container>
        <Routes>
          <Route path="/about" element={<Link to="/">Home</Link>} />
          <Route path="/" element={<Component/>} />
        </Routes>
      </Container>
      <Footer />
    </Router>
  );
}
export default App;

+++++++++++++++++++++++++++++++ routing ++++++++++++++++++++++++++++++++++++++++++++++

// this is how /src/index will look like

import ReactDOM from "react-dom/client";
import App from "./App";
import { Container } from "./components";
import { createBrowserRouter, RouterProvider } from "react-router-dom";

const root = ReactDOM.createRoot(document.getElementById("root"));
const router = createBrowserRouter([
  {
    path: "/",
    element: <App />,
  },
  {
    path: "/container",
    element: <Container />,
  },
]);

root.render(<RouterProvider router={router} />);


******** error or page not found **** 

{
    path: "/",
    element: <App />,
    errorElement: <h1>404 Not Found</h1>,      #or component
  },
// or
{
    path: "*",
    element: <h1>Not Found</h1>,
  },
*************************************
******* for dynamic path: ***********
{
    path: "/container/:id",
    element: <Container />,
  }, 

// and we can get that param from the container by 

import { useParams } from "react-router-dom";
...
const params = useParams();
...
<h1>{params.id}</h1>

*************************************
******* children ***********
{
    path: "/parents",
    element: <parents />,
    children: [
      {
        path: "/parents/:id",
        element: <child />,
      },
    ],
    
  }, 

// and we can get and display that child component in the parents comp by 

import { Outlet } from "react-router-dom";
...
<Outlet />

*************************************



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--------------------------------------------------------------------------------------------

------------------------------- Hookes --------------------------------------
// should be directly inside the component , not outside , and not in methode or if or loop ....

// use State
const [variable, setVariable] = useState(0);


++++++++++++++++++++++++++++++ useEffect +++++++++++++++++++++++++++++++++++++++

// useEffect(func,dep)

// will execute it when the variable changed ( mounted )
useEffect(()=>{
    console.log("Component did mount");
  },[variable])


// we can use return to execute when the variable or the component will unmount , 
useEffect(() => {
    console.log("Component did mount");
    return () => {
      console.log("Component will unmount");
    };
  }, [variable]);

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++ useRef ++++++++++++++++++++++++++++++++++++++++++++++++++++++

// useRef ndiroha bach nt7kmo fkach html elemnt , kima hmna ra7 ndiroha bah ndiro focus 3la linput ki nclicko 3la lbutton:

const inputRef=useRef()

const focus= () =>{
    if(inputRef.current){
      inputRef.current.focus()
    }
}

<button onClick={focus}>click to focus</button>
<input ref={inputRef} />

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++ UseMemo ++++++++++++++++++++++++++++++++++++++++++++++++++++++

// UseMemo kima UseEffect brk trj3na l9ima ta3 lfunction (hna calculate) lelvariable (hna result)
// useMemo will be memorized , so will not render it everytime u rerender the component 
// so we use it with functions that take time , but dont happen everytime
const result=useMemo(()=>{calculate()},[success])

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// hdi ki ytbdl linput utaficha flconsole , t5dm m3a onChange
const hund=(e)=>{
    console.log(e.target.value)
   }

<input onChange={hund} />
------------------------------------------------------------------------------

