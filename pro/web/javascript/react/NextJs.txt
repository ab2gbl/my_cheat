npx create-next-app			#create app

//first lets create directory "components", and for each component , we will create file "compname.tsx"
  
// we started here with header component, and this is our component
	//first this is the type of params that the component can get 
	type HeaderParams={
	  title: string;
	  text?: string;		// '?' mean that this param is opptional , u can don't send it
	}
	// then the component
	function Header(props:HeaderParams){
	  return(
	    <p>header {props.text}</p>
	  )
	 }
	export default Header


// and to use it on the main we need to use this 

<Header text='test' />


------------------------------------------------- hooks --------------------------------------------------------------
// u should add this at first of project to work with hooks 
'use client';
+++++++++++++++++++++++++++++++++++++++++++++++ UseState ++++++++++++++++++++++++++++++++++++++++++++++++++++++

// useState ndiroha lvariable ysra render kiytbdl 

const [count,setcount]=useState(0);

func add(){
    setcount(count+1);
   }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++ useEffect ++++++++++++++++++++++++++++++++++++++++++++++++++++++

// useEffect tsra kitfta7 la page + ki ytbdl lvariable li mdinaholha parametre (success hna):
    
useEffect(()=>{
   console.log("#Event is succes")
},[success])

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++ useRef ++++++++++++++++++++++++++++++++++++++++++++++++++++++

// useRef ndiroha bach nt7kmo fkach html elemnt , kima hmna ra7 ndiroha bah ndiro focus 3la linput ki nclicko 3la lbutton:

const inputRef=useRef<HTMLInputElement>(null)

const add= () =>{
    if(inputRef.current){
      inputRef.current.focus()
    }
}

# hdi ki ytbdl linput utaficha flconsole , t5dm m3a onChange
const hund=(e)=>{
    console.log(e.target.value)
   }


<button onClick={add}>click to add</button>
<input ref={inputRef} onChange={hund} />

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++++++++++++++++ UseMemo ++++++++++++++++++++++++++++++++++++++++++++++++++++++

// UseMemo kima UseEffect brk trj3na l9ima ta3 lfunction (hna calculate) lelvariable (hna result)
const result=useMemo(()=>{calculate()},[success])

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

----------------------------------------------- api ------------------------------------------------------------


+++++++++++++++++++++++++++ example of getting data when open the component +++++++++++++++++++++++++++ 

***************  this is server component ***************

async function apitest(){
    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1')
    const todo=await response.json()
    return(
        <div>{todo.title}</div>
    )
}
export default apitest

************************************************************

*************** and this is client component ***************

'use client';
import { useState,useEffect } from "react";

function apitestclient(){
    const [todo,settodo]=useState({})
    useEffect( async () => {
        const response=await fetch('https://jsonplaceholder.typicode.com/todos/1')
        const result= await response.json()
        settodo(result)
    },[])
    return (
        <div>
            {todo.title}
        </div>
    )
}
export default apitestclient
************************************************************

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++ SSR vs SSG vs ISG +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// note: fetch default = SSG
 
// SSR: " Server Side Rendering " kol matd5l lel component , ydir request bach yafichi lcomponent , donc ywli t9il chwi site 

const response=await fetch(
            'https://jsonplaceholder.typicode.com/todos/1',
		{ 
			cache: 'no-store'		
		}
)

// SSG: " Static Site Generation " hdi lpaja twli static, request dirha mra wtsauvgardiha , sma ysra kch update fbackend mjiboch , mais twli bzf khfifa

const response=await fetch(
            'https://jsonplaceholder.typicode.com/todos/1',
		{ 
			cache: 'force-cache'		//default
		}
)

// ISG: " Incremental Static Regeneration " hdi mix bin "SSG" w "SSR" , hdi dir request wtsauvgardiha f cache, lcache hda 3ndo w9t apr, sma request mtzidch tsra 7ta y5las dak lw9t  

const response=await fetch(
            'https://jsonplaceholder.typicode.com/todos/1',
		{ 
			next: {
				revalidate: 60			// cache time = 60 s
			}				
		}
)



