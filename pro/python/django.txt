pip install virtualenv
virtualenv test					create virtual envirenment 
test\Scripts\activate				activate the virtual envirenment 
pip install django				install django in the virtual envirenment 
cd test 
django-admin startproject projectname		create project
cd projectname
python manage.py migrate			migrate
code .						open vscode here
python manage.py createsuperuser		create admin

python manage.py runserver			start server

------------------------------------------create app-------------------------------------------------
python manage.py startapp appname		create app on our project
// than we should add this app to our project, in project/setting.py ,on installed app add:
'appname.apps.AppnameConfig',			parex test :'test.apps.TestConfig',
// then create urls.py on ur application folder,and on  project/urls.py add 
from django.urls import path,include
//then on urlpatterns add:
path('appname/',include('appname.urls')),
------------------------------------------------------------------------------------------------------

---------------------------------------------views----------------------------------------------------

from django.http import HttpResponse
// then create tis func 

def example(request):
    return HttpResponse('hello world')

// and add it on urls of app :

from django.urls import path
from . import views

urlpatterns = [
    path('', views.example,name='appname'),
]

def product(request):
    return render(request,'products/product.html') 		to select page from template
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//to send data to page html u can use this :

def product(request):
    return render(request,'',{'name':'ali'})

//here we send the variable name to page html , to use and print his value we can use :
{{name}}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--------------------------------------------template-----------------------------------------------------------
//create new folder asmo "templates"
//then on setting : 
import os
//then on templates do this :
'DIRS': [os.path.join(BASE_DIR,'templates')],

//now t9dr trbt view m3a template
//create example.html f templates or templates/pages
//then fl view ,fl function ta3na rj3ha hka :
def index(request):
    return render(request,'pages/index.html')
        



--------------------------------------------tags(dtl or html)-----------------------------------------------------------
{% extends 'example.html' %}
{% block content %}html code {% endblock content %}
{% include 'example.html' %}
{% if ex==ex %}html code{% else %}html code{% endif %}
{% comment %} comment {% endcomment %}
{% for i in example %}html code{% endfor %}

++++++++++++import css or js or picture(after did static methods)+++++++++++++
{% load static %}
<link rel="stylesheet" href="{% static 'css/style.css' %}">
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

{% url 'name_of_page_on_urls.py' %} 		example: <a href="{% url 'about' %}">about</a>
ff



--------------------------------------------static(css,js,pictures....)---------------------------------------------------------//
//create new folder on projectname asmo static 
// and create on them css folder ,js folder ....
//and on setting win static add:

STATIC_ROOT = os.path.join(BASE_DIR,'static')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'projectname/static')
]
//then run the command:
python manage.py collectstatic 


--------------------------------------------models---------------------------------------------------------//

# Create your class (class example here):

class Product (models.Model):
    name = models.CharField(max_length=50)
    content = models.TextField()
    price = models.DecimalField(max_digits=6,decimal_places=3)
    image = models.ImageField(upload_to='photos/%y/%m/%d')
    active = models.BooleanField(default=True)

    guest=models.ForeignKey(Guest, related_name='reservation',on_delete=models.CASCADE)		// foreign key

// then do :
python manage.py makemigrations
python manage.py migrate

+++++++++++++++++++++++++++++++admin pannel+++++++++++++++++++++++++++++++++
//then on app/admin :
from .models import Product
admin.site.register(Product)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++views++++++++++++++++++++++++++++++++++++++
from .models import Product

// then to send all objects to html page we can use "Product.objects.all()" like that :
def products(request):
    return render(request,'products/products.html',{'pro':Product.objects.all()}) 
//or the product has price=50
def products(request):
    return render(request,'products/products.html',{'pro':Product.objects.get(price=50)}) 	//the product has price=50
//or all products has price=50
def products(request):
    pro = Product.objects.all()	 	
    x={'pro': pro.filter(price=50)}
    return render(request,'products/products.html',x) 	
//or all products has not price=50 (by exuclude opposit of filter)
	x={'pro': pro.exclude(price=50) }



//u can order them by :
	x={'pro': pro.order_by("price") }
//or count by
	x={'pro': str(pro.count()) }



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+++++++++++++++++++++++++++++++++templates++++++++++++++++++++++++++++++++++++++
//u can justuse loop like that:
	{% for i in pro %}
        	<h2>{{i.name}}</h2>
    	{% endfor %}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
//on class u can use this function:
def __str__(self):			
        return self.name			this function to select what can u display in admin page

// and this class:
class Meta:
        verbose_name = 'ModelName'		to change model (or class) name 	
        ordering = ['name']			to order objects with name 
//u can use this paaramatre on Field like that:
category = models.CharField(, blank=True, null=True)     	   
//and for choices u can use that :
x=[
	('phone','phone'),			first 'phone' is for display on admin page and second 'phone' is fore name on database
 	('computer','computer'),
]
category = models.CharField(,choices=x) 


--------------------------------------------media(files and images)------------------------------------------------------------
//first add this on setting:
#Media
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')
//and in project.urls add this:

from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
	...
]+static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)	


--------------------------------------------------form and request----------------------------------------------------------------------------
//we have the next model:
class User(models.Model):
    username = models.CharField(max_length=50)
    password = models.CharField(max_length=50)

++++++++ method:1 ++++++++++++++++++++
// in view method u can use this
def example(request):
	x = request.POST.get('username')
	y = request.POST.get('password')
	data = user(username=x,username=y)
	data.save()
	return render(request,'pages/signin.html') 

++++++++ method:2 ++++++++++++++++++++	
// fi plast ma dir inputs ftemplate, t9dr t5dm blform
// in the app create file "forms.py", and do this on it:
from django import forms
// and the same class of the model, u can change just models to forms and change the name, like that:
class Userform(forms.Form):
    username = forms.CharField(max_length=50)
    password = forms.CharField(max_length=50)

//and in the view add this:
from .forms import Userform
def example(request):
	x = request.POST.get('username')
	y = request.POST.get('password')
	data = user(username=x,username=y)
	data.save()
	return render(request,'pages/signin.html',{uf:Userform}) 


++++++++ method:3 ++++++++++++++++++++

// in the app create file "forms.py", and do this on it:
from django import forms
from .models import User
// and the same class of the model, u can change just models to forms and change the name, like that:
class Userform(forms.ModelForm):
    class Meta:
	model = User
	fields = '__all__'	//or fields = ['username','password']

//and in the view add this:
from .forms import Userform
def example(request):
	data = Userform(request.POST)
	data.save()
	return render(request,'pages/signin.html',{uf:Userform}) 

-------------------------------------------------- api -------------------------------------------------------------------------------------------------------------

// then on views we have 3 method to do an api:

++++++++ method:1 ++++++++++++++++++++
// 1- without Rest and no model 
def no_rest_no_model(request):
    guests=[
        {
            'id': 1,
            'name': 'omar',
            'mobile': 666666
        },
        {
            'id': 2,
            'name': 'samy',
            'mobile': 555555
        }
    ]
    return JsonResponse(guests,safe=False)

++++++++ method:2 ++++++++++++++++++++
def no_rest_from_model(request):
    data = Guest.objects.all()
    response = {
        'guest' : list(data.values('name','mobile'))
    }
    return JsonResponse(response)
++++++++ method:3 ++++++++++++++++++++
Rest framework

-------------------------------------------------- Rest framework ----------------------------------------------------------------------------------------
// by using rest framework
pip install djangorestframework			install
// add it to setting apps

INSTALLED_APPS = [
    'rest_framework',
]

// first u should create serializers.py on ur app:

from rest_framework import serializers
from tickets.models import Guest,Movie,Reservation

class MovieSerializer(serializers.ModelSerializer):
    class Meta:
        model = Movie
        fields = '__all__'

// now we can work on view

from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status,filters
from .serializers import MovieSerializer,GuestSerializer,ReservationSerializer

++++++++++++++++++++++++++++++++++++++++++++++++ based view (BV) ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

********************************************************* FBV (function) ********************************

// 1- GET POST (LIST and Create
@api_view(['GET','POST'])
def FBV_List (request):
    # GET
    if request.method == 'GET':
        guests = Guest.data = Guest.objects.all()
        serilaizer = GuestSerializer( guests , many=True)
        return Response(serilaizer.data)
    # POST
    elif request.method == 'POST':
        serilaizer = GuestSerializer(data=request.data)
        if serilaizer.is_valid():
            serilaizer.save()
            return Response(serilaizer.data,status= status.HTTP_201_CREATED) 
        else :
            return Response(serilaizer.data,status=status.HTTP_400_BAD_REQUEST) 


// 2- GET PUT DELETE

#url should be like that: "path('FBV_pk/<int:pk>', views.FBV_pk),"
@api_view(['GET','PUT','DELETE'])
def FBV_pk (request,pk):
    try:
        guest = Guest.data = Guest.objects.get(pk=pk)
    except Guest.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)
    # GET
    if request.method == 'GET':
        serilaizer = GuestSerializer( guest )
        return Response(serilaizer.data)
    # PUT
    elif request.method == 'PUT':
        serilaizer = GuestSerializer(guest,data=request.data)
        if serilaizer.is_valid():
            serilaizer.save()
            return Response(serilaizer.data,status= status.HTTP_202_ACCEPTED) 
        else :
            return Response(serilaizer.errors,status=status.HTTP_400_BAD_REQUEST) 
    # DELET    
    elif request.method == 'DELETE':
        guest.delete()
        return Response(status= status.HTTP_200_OK)

************************************************ CBV (class) *******************************************
from rest_framework.views import APIView

// 1- GET POST 

#url should be: "path('CBV_List/', views.CBV_List.as_view()),"
class CBV_List(APIView):
    def get(self, request):
        guests = Guest.data = Guest.objects.all()
        serilaizer = GuestSerializer( guests , many=True)
        return Response(serilaizer.data)
    def post(self, request):        
        serilaizer = GuestSerializer(data=request.data)
        if serilaizer.is_valid():
            serilaizer.save()
            return Response(serilaizer.data,status= status.HTTP_201_CREATED) 
        else :
            return Response(serilaizer.data,status=status.HTTP_400_BAD_REQUEST)


// 2- GET PUT DELETE

# url should be: "path('CBV_pk/<int:pk>/', views.CBV_pk.as_view()),"
class CBV_pk(APIView):
    def get_object(self, pk):
        try:
            return Guest.objects.get(pk=pk)
        except Guest.DoesNotExist:
            raise Http404
    def get(self, request, pk):
        guest=self.get_object(pk)
        serilaizer = GuestSerializer( guest )
        return Response(serilaizer.data)
    def put(self, request, pk):  
        guest=self.get_object(pk)
        serilaizer = GuestSerializer(guest,data=request.data)
        if serilaizer.is_valid():
            serilaizer.save()
            return Response(serilaizer.data,status= status.HTTP_202_ACCEPTED) 
        else :
            return Response(serilaizer.errors,status=status.HTTP_400_BAD_REQUEST)
    def delete(self, request, pk):  
        guest=self.get_object(pk)
        guest.delete()
        return Response(status= status.HTTP_200_OK)

++++++++++++++++++++++++++++++++++++++++++++++++ Mixins ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
from rest_framework import mixins

//we have this:
	# mixins.ListModelMixin			get all objects
	# mixins.CreateModelMixin		create new object
	# mixins.RetrieveModelMixin		get 1 object 
    	# mixins.UpdateModelMixin 		update 1 object
    	# mixins.DestroyModelMixin		delete 1 object

// 1- GET POST

#url should be: "path('mixins_list/', views.mixins_list.as_view()),,"
class mixins_list(mixins.ListModelMixin,mixins.CreateModelMixin,generics.GenericAPIView):
    queryset = Guest.objects.all()
    serializer_class = GuestSerializer
    
    def get(self, request):
        return self.list(request)
    def post(self, request):
        return self.create(request)

// 2- GET PUT DELETE

#url should be: "path('mixins_pk/<int:pk>', views.mixins_pk.as_view()),"
class mixins_pk(mixins.RetrieveModelMixin,mixins.UpdateModelMixin,mixins.DestroyModelMixin,generics.GenericAPIView):
    queryset = Guest.objects.all()
    serializer_class = GuestSerializer
    
    def get(self, request,pk ):
        return self.retrieve(request)
    def put(self, request,pk):
        return self.update(request)
    def delete(self, request,pk):
        return self.delete(request)


++++++++++++++++++++++++++++++++++++++++++++++++ Generics ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
from rest_framework import generics

//we have this:
	# generics.ListAPIView				List
	# generics.ListCreateAPIView			List + create
	# generics.RetrieveUpdateDestroyAPIView		Retrieve + Update + Destroy
	....

// 1- GET POST

# url should be: "path('generics_list/', views.generics_list.as_view()),"
class generics_list(generics.ListAPIView):
    queryset = Guest.objects.all()
    serializer_class = GuestSerializer

// 2- GET PUT DELETE

# url should be: "path('generics_pk/<int:pk>', views.generics_pk.as_view()),"
class generics_pk(generics.RetrieveUpdateDestroyAPIView):   
    queryset = Guest.objects.all()
    serializer_class = GuestSerializer		



++++++++++++++++++++++++++++++++++++++++++++++++ Viewsets ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
from rest_framework import viewsets		

// GET POST PUT DELETE

class viewsets_guest(viewsets.ModelViewSet):	
    queryset = Guest.objects.all()
    serializer_class = GuestSerializer 

// in urls we should do that:

from django.urls import include, path
from rest_framework.routers import DefaultRouter    

router = DefaultRouter()
router.register('guests',views.viewsets_guest)

urlpatterns = [
	...
  	path('viewsets/',include(router.urls))
]

